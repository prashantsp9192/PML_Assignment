names(segmentationOriginal)
train<-createDataPartition(y=segmentationOriginal$Case,p=0.75,list=FALSE)
training<-segmentationOriginal[train,]
testing<-segmentationOriginal[-train,]
dim(training)
dim(testing)
?seed
set.seed(125)
names(segmentationOriginal)
model<-train(Case~., data=training, method="rpart")
model$finalModel
plot(model$finalModel, uniform=TRUE)
text(model$finalModel)
predict(model, newdata=testing)
head(segmentationOriginal$Case)
head(segmentationOriginal)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal[,1:4])
set.seed(125)
train<-createDataPartition(y=segmentationOriginal$Case,p=0.75)
training<-segmentationOriginal[train,]
train<-createDataPartition(y=segmentationOriginal$Case,p=0.75,list=FALSE)
training<-segmentationOriginal[train,]
training<-segmentationOriginal[-train,]
model<-train(Case ~ .,method="rpart",data=training)
model$finalModel
training<-segmentationOriginal[train,]
testing<-segmentationOriginal[train,]
training<-segmentationOriginal[train,]
testing<-segmentationOriginal[-train,]
model<-train(Case ~ .,method="rpart",data=training)
model$finalModel
plot(model$finalModel,uniform=TRUE)
text(model$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
?tetx
?text
plot(model$finalModel,uniform=TRUE)
text(model$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
fancyRpartPlot(model$finalModel)
head(segmentationOriginal$Case)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal$Case)
sessionInfo()
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
inTrain<-createDataPartition(y=segmentationOriginal$Case,p=0.7,list=FALSE)
training<-segmentationOriginal[inTrain,]
testing<-segmentationOriginal[-inTrain,]
dim(training)
dim(testing)
set.seed(125)
training<-segmentationOriginal[inTrain,]
testing<-segmentationOriginal[-inTrain,]
head(testing[,1:5])
model<-train(Class ~ ., method="rpart", data=training)
plot(model$finalModel)
text(model$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
dim(olive)
head(olive)
data(olive)
dim(olive)
olive=olive[,-1]
data(olive)
dim(olive)
head(olive)
olive=olive[,-1]
dim(olive)
head(olive)
model<-train(Area ~ .,method="rpart",data=olive)
summary(olive)
str(olive)
tail(olive)
plot(model$finalModel)
text(model$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
dim(newdata)
head(newdata)
newdata
predict(model, newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model<-train()
?train
?glm
?train
trainControl
?trainControl
" (method="glm", be sure to specify family="binomial") with Coronary Heart Disease (chd) as the outcome and age at onset, current alcohol consumption, obesity levels, cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol as predictors. Calculate the misclassification rate for your model using this function and a prediction on the "response" scale"
head(SAheart)
data<-SAheart[,-c(1,4,5)]
head(data)
?train
model<-train(chd ~ age+alcohol+obesity+typea+tobacco+ldl, method="glm", family="binomial", data=trainSA)
model$finalModel
plot(model$finalModel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
misClass(trainSA,model)
missClass(trainSA,model)
missClass(trainSA$chd,model)
missClass(trainSA,model)
model<-train(chd ~ age+alcohol+obesity+typea+tobacco+ldl, method="glm", family="binomial", data=trainSA,list=FALSE)
warnings()
model<-train(chd ~ age+alcohol+obesity+typea+tobacco+ldl, method="glm", family="binomial", data=trainSA,list=FALSE)
missClass(trainSA,model)
model<-train(chd ~ age+alcohol+obesity+typea+tobacco+ldl, method="glm", family="binomial", data=trainSA)
head(trainSA)
names(trainSA)
head(trainSA$chd)
predict(model, newdata=trainSA)
training<-predict(model, newdata=trainSA)
class(training)
testing<-predict(model, newdata=testSA)
dim(training)
length(training)
length(testing)
missClass(trainSA$chd,training)
missClass(testSA$chd,testing)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
head(vowel.test)
dim(vowel.train)
dim(vowel.test)
set.seed(33833)
?varImp
varImp(vowel.train)
model<-train(y ~ ., method="rf", data=vowel.train)
model<-train(y ~ ., method="rf", data=vowel.train)
varImp(model)
varImp(model)
varImp(model)
predict(model, newdata= vowel.test)
x<-predict(model, newdata= vowel.test)
varImp(x)
x<-varImp(model, scale=FASLE)
str(vowel.train)
x<-vowel.train
y<-vowel.test
x$y<-as.factor(x$y)
y$y<-as.factor(y$y)
model<-train(y ~ ., method="rf", data=x)
varImp(model)
sort(varImp(model))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
getwd()
setwd("C:/Users/ppandey2/Google Drive/Courses/Coursera/Specialisations/DataScience Specialisation/Practical Machine Learning/Assignment")
getwd()
ls()
train_data<-read.csv("pml-training.csv")
test_data<-read.csv("pml-testing.csv")
head(train_data)
dim(test_data)
names(test_data)
dim(test_data)
dim(train_data)
head(train_data[,1:2])
head(train_data[,1:2],20)
head(train_data[,1:2],200)
head(train_data[,1:2],332)
head(train_data[,1:2],350)
names(train_data)
head(train_data$classe)
head(train_data[,1:6])
head(train_data[,1:6],65)
head(train_data[,1:8],65)
names(train_data)
head(train_data[,5:12],65)
names(train_data)
model<-train(clase ~ ., method="rf", data=train_data)....
library(caret)
model<-train(clase ~ ., method="rpart", data=train_data)
model<-train(classe ~ ., method="rpart", data=train_data)
dim(test_data)
names(train_data)
names(test_data)
predict(model, newdata=test_data)
x<-names(train_data)
y<-names(test_data)
y<-names(test_data[,1:159])
x<-names(train_data[,1:159])
head(x)
head(y)
x==y
x<-names(train_data)
y<-names(test_data)
x==y
warnings()
train_data[15,1:12]
train_data[25,1:12]
train_data[26,1:12]
train_data[24,1:12]
train_data[24,1:14]
str(train_data)
?rpart
names(train_data)
str(train_data)
names(train_data)
train_data[1:2,2]
head(train_data[,5:9])
a<-c(1,2,3,4,5)
b<-c(5,6,7,8,9)
z<-as.data.frame(cbind(a,b))
z
c<-c(0,2,4,6,8)
z<-cbind(z,c)
z
y<-z[,-1]
y
names(y)
y<-z[,-c(1,3)]
y
y<-z[,-1]
class(y)
new_train<-train_data[,-c(3:7)]
names(new_train)
head(new_train[,1:10])
str(new_train)
x<-str(new_train)
x<-str(new_train)
class(x)
?str
str(new_train, list.len=200)
str(new_train, list.len=200)
x<-new_train$kurtosis_yaw_belt
length(x)
class(x)
levels(x)
head(x)
x
new_train$var_accel_arm
str(new_train, list.len=200)
dim(new_train)
num<-10000
z
for(i in 1:nrow(z)){print(i)}
for(i in 1:ncol(z)){print(i)}
for(i in 1:ncol(z)){print(z[,i])}
for(i in 1:ncol(z)){print(class(z[,i])}
for(i in 1:ncol(z)){print(class(z[,i]))}
z<-cbind(z,c(NA,NA,2,3,4))
z
names(z)<-c('a','b','c','d')
z
is.na(z$d)
sum(is.na(z$d))
for(i in 1:ncol(z)){if(sum(is.na(z[,i]))>2){temp<-c(temp,i)}}....
temp<-c()
for(i in 1:ncol(z)){if(sum(is.na(z[,i]))>2){temp<-c(temp,i)}}
temp
temp<-c()
for(i in 1:ncol(z))
{
if(sum(is.na(z[,i]))>1)
{
temp<-c(temp,i)
}
}
temp
y<-z[,temp]
y
z
y<-z[,-temp]
y
num=10000
temp<-c()
for(i in 1:ncol(new_train))
{
if(sum(is.na(new_train[,i]))>num)
{
temp<-c(temp,i)
}
}
temp
length(temp)
ncol(new_train)
155-67
num=8000
temp<-c()
for(i in 1:ncol(new_train))
{
if(sum(is.na(new_train[,i]))>num)
{
temp<-c(temp,i)
}
}
temp
length(temp)
num=15000
temp<-c()
for(i in 1:ncol(new_train))
{
if(sum(is.na(new_train[,i]))>num)
{
temp<-c(temp,i)
}
}
length(temp)
new_train2<-new_train[,-temp]
str(new_train2)
new_train2<-new_train[,-temp].....
x<-is.factor(new_train2$user_name)
x
temp2<-c()
for(i in 1:ncol(new_train2))
{
if(is.factor([,i]))
{
temp2<-c(temp2,i)
}
}
temp2<-c()
for(i in 1:ncol(new_train2))
{
if(is.factor([,i]))
{
temp2<-c(temp2,i)
}
}
temp2<-c()
for(i in 1:ncol(new_train2))
{
if(is.factor(new_train2[,i]))
{
temp2<-c(temp2,i)
}
}
factor_variable<-c(new_train2[,temp2])
dim(factor_variable)
class(factor_variable)
factor_variable<-new_train2[,temp2]
class(factor_variable)
dim(factor_variable)
dim(new_train2)
88-35
str(new_train)
str(new_train2)
head(new_train2$kurtosis_roll_belt)
head(new_train2$kurtosis_roll_belt,100)
head(new_train2$kurtosis_roll_belt,1000)
new_train3<-new_train2[,temp2]
str(new_train3)
new_train3<-new_train2[,-temp2]
new_train3
str(new_train3)
num=1
temp4<-c()
for(i in 1:ncol(new_train3))
{
if(sum(is.na(new_train3[,i]))>num)
{
temp4<-c(temp4,i)
}
}
new_train4<-new_train3[,-temp4]
class(new_train3)
dim(new_train3)
temp4
class(new_train3)
data<-new_train3
dim(data)
str(data)
head(train_data[,2])
head(train_data[,160])
data<-cbind(train_data[,2],data)
data<-cbind(data,train_data[,160])
str(data)
train_data[, 2]
head(train_data[, 1])
head(train_data[, 2])
str(train_data)
data<-new_train3
data<-cbind("user_name"=train_data[,2],data)
data<-cbind(data,"classe"=train_data[,160])
str(data)
levels(data$user_name)
dim(data)
data<-new_train3
data<-cbind(data,"classe"=train_data[,160])
str(data)
inTrain<-createDataPartition(y=data$classe,p=0.7,list=FALSE)
training<-data[inTrain,]
testing<-data[-inTrain,]
dim(training)
dim(testing)
model<-train(classe ~ .,method="rpart",data=training)
predict(model,newdata=testing)
?confusionMatrix
model
predict
confusionMatrix(...)
predicted<-predict(model,newdata=testing)
class(predicted)
levels(predicted)
confusionMatrix(predicted,testing$classe)
model<-train(classe ~ .,method="rf",data=training)
predict(model, newdata=testing)
predicted<-predict(model,newdata=testing)
confusionMatrix(predicted,testing$classe)
class(test_data)
dim(test_data)
temp1
temp
length(temp)
length(temp2)
67+35
160-102
...new_train<-train_data[,-c(3:7)]...
dim(data)
x<-c(3:7)
x
x<-c(x,temp)
x
x<-c(x,temp2)
x
length(x)
test_final<-test_data[,-x]
dim(test_final)
length(x)
length(test_data)
y<-unique(x)
y
length(y)
str(test_data)
new_train<-train_data[,-c(3:7)]....
new_test<-test_data[,c(3:7)]
new_train2<-new_train[,-temp]...
new_test2<-new_test[,-temp]
new_train3<-new_train2[,-temp2]....
new_test3<-new_test2[,temp2]
new_test3<-new_test2[,-temp2]
dim(new_test3)
dim(new_test2)
dim(new_test)
dim(test_data)
new_test<-test_data[,c(3:7)]
dim(new_test)
new_test<-test_data[,-c(3:7)]
dim(new_test)
new_test2<-new_test[,-temp]
dim(new_test2)
new_test3<-new_test2[,-temp2]
dim(new_test3)
str(new_test3)
str(data)
predicted<-predict(model,newdata=testing)......
predicted_final<-predict(model,newdata=final_test)....
final_test<-new_test3
dim(final_test)
predicted_final<-predict(model,newdata=final_test)
predicted_final
final_test
x<-data$classe[1:20]
x
final_test<-cbind(final_test,x)
final_test<-cbind(new_test3,"classe"=x)
str(final_test)
predicted_final<-predict(model,newdata=final_test)
predicted_final
test_data
dim(test_data)
dim(final_test)
str(final_tets)
str(final_test)
head(train_data[,1:10])
head(train_data[,150:160])
head(train_data[1:100,158:160])
head(train_data[,158:160],100)
head(train_data[,158:160],1000)
head(train_data[,158:160],1000:10004)
train_data[1000:1004,158:160]
train_data[2000:2004,158:160]
dim(train_data)
train_data[7000:7004,158:160]
train_data[15000:15004,158:160]
train_data[18000:18004,158:160]
dim(test_data)
